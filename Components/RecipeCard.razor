@using RecipeManagementApp.Data;
@inject NavigationManager NavigationManager
<link href="css/card.css" rel="stylesheet" />

@if (recipe != null)
{
    <div class="card recipe-card mb-3 shadow-sm">
        <div class="card-header">
            <h4 class="mb-0" style="font-weight: bold;">@recipe.Name</h4>
        </div>
        <div class="card-body">
            <img src="data:image/png;base64,@Convert.ToBase64String(recipe.ImageData)" alt="@recipe.Name" class="card-img-top recipe-image" />
            <br /><br />
            <p class="card-text"><strong>Description:</strong> @recipe.Description</p>

            <p><strong>Ingredients:</strong></p>
            <ul class="list-styled">
                @if (!string.IsNullOrEmpty(recipe.IngredientsString))
                {
                    // Split the IngredientsString by commas and trim any extra whitespace
                    var ingredients = recipe.IngredientsString.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(ingredient => ingredient.Trim());

                    foreach (var ingredient in ingredients)
                    {
                        <li>@ingredient</li>
                    }
                }
                else
                {
                    <li>No ingredients available.</li>
                }
            </ul>

            <p><strong>Instructions:</strong> @recipe.Instructions</p>
        </div>
        <div class="card-footer d-flex justify-content-between">
            <p class="mb-0 me-auto"><strong>Category:</strong> @recipe.Category</p>
            <div>
                <button class="btn btn-warning me-2" id="editbtn" @onclick="OnEditClicked">Edit</button>
                <button class="btn btn-danger" id="delbtn" @onclick="OnDeleteClicked">Delete</button>
            </div>
        </div>

    </div>
}
else
{
    <p class="none">No recipe found.</p>
}
<link href="css/card.css" rel="stylesheet" />
@code {
    [Parameter]
    public Recipe recipe { get; set; }

    [Parameter]
    public EventCallback<Recipe> OnDelete { get; set; } 

    private async Task OnDeleteClicked()
    {
        var confirmed = await ConfirmDelete(); // Show confirmation dialog
        if (confirmed && OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(recipe); // Invoke the delete callback
        }
    }

    // Method to show a confirmation dialog (implementation can vary)
    private Task<bool> ConfirmDelete()
    {
        return Task.FromResult(true); // Placeholder for a real confirmation dialog
    }

    private void OnEditClicked()
    {
        if (recipe != null && NavigationManager != null)
        {
            // Navigate to the recipe form with the recipe ID for editing
            NavigationManager.NavigateTo($"/recipeForm/{recipe.Id}");
        }
        else
        {
            Console.WriteLine("NavigationManager is null or recipe is null");
        }
    }
}
